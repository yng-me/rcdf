[{"path":"https://yng-me.github.io/rcdf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rcdf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with RCDF Files in R","text":"rcdf package powerful toolkit securely working RCDF (Encrypted Parquet) files R. RCDF custom data format designed provide strong encryption metadata management sensitive datasets. rcdf, users can easily handle encrypted data, including reading, writing, exporting data stored secure format. vignette walk key features package, including encrypt save data RCDF format, decrypt read RCDF files, export data common formats.","code":""},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Working with RCDF Files in R","text":"use rcdf package, ’ll need install first. can install package directly GitHub using devtools package: installed, can load package start working RCDF files.","code":"# Install the package from GitHub devtools::install_github(\"yng-me/rcdf\") library(rcdf)"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"writing-data-to-rcdf-format","dir":"Articles","previous_headings":"","what":"Writing data to RCDF format","title":"Working with RCDF Files in R","text":"core function writing data RCDF format write_rcdf(). function encrypts data using AES encryption, generates encrypted metadata version control using RSA encryption, saves data encrypted Parquet files inside zip archive. ensures data stored securely can decrypted using correct key. Usage: Parameters: data: list data frames tables written RCDF format. element list represents record. path: path RCDF file written. file saved .rcdf extension already specified. pub_key: public RSA key used encrypt AES encryption keys. ...: Additional arguments passed helper functions needed. metadata: list metadata included RCDF file. Can contain system information relevant details. example: data list containing two data frames. encrypted saved separate Parquet files within RCDF. pub_key RSA public key used encrypt AES keys. AES keys used encrypting data fast secure manner. write_rcdf() function create zip archive containing encrypted Parquet files metadata, save path.","code":"write_rcdf(data, path, pub_key, ..., metadata = list()) # Sample data (list of data frames) data <- rcdf_list() data$table1 = data.frame(x = 1:10, y = letters[1:10]) data$table2 = data.frame(a = rnorm(10), b = rnorm(10))  # Sample public RSA key (for encryption) pub_key <- file.path(system.file(\"extdata\", package = \"rcdf\"), \"sample-public-key.pem\")  # Write the data to an RCDF file write_rcdf(data = data, path = \"path/to/rcdf_file.rcdf\", pub_key = pub_key)"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"reading-and-decrypting-rcdf-data","dir":"Articles","previous_headings":"","what":"Reading and decrypting RCDF data","title":"Working with RCDF Files in R","text":"read decrypt RCDF file, can use read_rcdf() function. function extracts encrypted Parquet files RCDF archive, decrypts using provided decryption key, loads data back R RCDF object. Usage: Parameters: path: string specifying path RCDF archive (zip file). decryption_key: key used decrypt RCDF contents. can RSA AES key, depending RCDF encrypted. ...: Additional parameters passed functions, needed. password: password used RSA decryption (optional). metadata: optional metadata object containing data dictionaries value sets. metadata applied data provided. example: path path RCDF file contains encrypted data. decryption_key key used decrypt AES keys Parquet files. RCDF encrypted using RSA, ’ll need private RSA key decrypt . read_rcdf() function returns RCDF object, essentially list decrypted Parquet files (one data frame original data) along metadata file.","code":"read_rcdf(path, decryption_key, ..., password = NULL, metadata = NULL) # Using sample RCDF data dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) rcdf_data  # Using encrypted/password protected private key rcdf_path_pw <- file.path(dir, 'mtcars-pw.rcdf') private_key_pw <- file.path(dir, 'sample-private-key-pw.pem') pw <- '1234'  rcdf_data_with_pw <- read_rcdf(   path = rcdf_path_pw,   decryption_key = private_key_pw,   password = pw ) rcdf_data_with_pw"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-other-formats","dir":"Articles","previous_headings":"","what":"Exporting data to other formats","title":"Working with RCDF Files in R","text":"data decrypted read R, can export formats using write_rcdf_as() write_rcdf_*() family functions. function support wide variety common formats, including CSV, TSV, JSON, Excel, Stata, SPSS, SQLite.","code":""},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-csv-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to CSV format","title":"Working with RCDF Files in R","text":"write_rcdf_csv() function allows export data stored RCDF object CSV files. useful need share process data non-encrypted, readable format. Usage: Parameters: data: RCDF object contains decrypted data. data obtained calling read_rcdf() decryption methods. path: target directory file CSV files saved. ...: Additional arguments passed write.csv() function customizing CSV export (e.g., setting delimiters, row names, etc.). parent_dir: optional parent directory included path files written. save table RCDF object separate CSV file specified directory.","code":"write_rcdf_csv(data, path, ..., parent_dir = NULL) write_rcdf_csv(data = rcdf_data, path = \"path/to/output\", row.names = FALSE)"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-tsv-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to TSV format","title":"Working with RCDF Files in R","text":"write_rcdf_tsv() function similar CSV export function writes data tab-separated values (TSV) files. Usage: Parameters: data: decrypted RCDF object containing data export. path: target directory file output TSV files. ...: Additional arguments customizing TSV export passed write.table() function (e.g., setting delimiters, handling row names). parent_dir: optional parent directory included path files written. function save data frame RCDF object separate TSV file target location.","code":"write_rcdf_tsv(data, path, ..., parent_dir = NULL) write_rcdf_tsv(data = rcdf_data, path = \"path/to/output\", row.names = FALSE)"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-json-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to JSON format","title":"Working with RCDF Files in R","text":"write_rcdf_json() function allows export decrypted RCDF data JSON format. useful working APIs systems require data JSON. Usage: Parameters: data: decrypted RCDF object. path: target directory file saving JSON files. ...: Additional arguments customize JSON export passed jsonlite::toJSON() (specifying indentation compactness JSON output). parent_dir: optional parent directory included path files written. convert data frame RCDF object separate JSON file save specified directory. pretty = TRUE option ensures output JSON files human-readable proper indentation.","code":"write_rcdf_json(data, path, ..., parent_dir = NULL) write_rcdf_json(data = rcdf_data, path = \"path/to/output\", pretty = TRUE)"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-parquet-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to Parquet format","title":"Working with RCDF Files in R","text":"write_rcdf_parquet() function exports decrypted data back Parquet format. Parquet columnar storage format highly efficient big data processing. Usage: Parameters: data: decrypted RCDF object. path: directory file path Parquet files saved. ...: Additional arguments passed write_parquet() function customization, specifying compression type. parent_dir: optional parent directory included path files written. function write data frame RCDF object separate Parquet files, storing specified directory.","code":"write_rcdf_parquet(data, path, ..., parent_dir = NULL) write_rcdf_parquet(data = rcdf_data, path = \"path/to/output\")"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-excel-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to Excel format","title":"Working with RCDF Files in R","text":"write_rcdf_xlsx() function used export decrypted RCDF data Excel (.xlsx) format. ’s helpful sharing data users prefer spreadsheet software. Usage: Parameters: data: decrypted RCDF object. path: directory file path Excel file saved. ...: Additional arguments customize Excel file export openxlsx package. parent_dir: optional parent directory included path files written.","code":"write_rcdf_xlsx(data, path, ..., parent_dir = NULL) write_rcdf_excel(data = rcdf_data, path = \"path/to/output.xlsx\", sheetName = \"Sheet1\")"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-stata-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to Stata format","title":"Working with RCDF Files in R","text":"write_rcdf_dta() function allows export data Stata’s .dta file format. useful users need work data Stata. Usage: Parameters: data: decrypted RCDF object. path: path Stata .dta file saved. ...: Additional arguments passed write.dta() function (e.g., specifying version Stata). parent_dir: optional parent directory included path files written.","code":"write_rcdf_dta(data, path, ..., parent_dir = NULL) write_rcdf_dta(data = rcdf_data, path = \"path/to/output\")"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-spss-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to SPSS format","title":"Working with RCDF Files in R","text":"write_rcdf_sav() function exporting decrypted RCDF data SPSS’s .sav file format. Usage: Parameters: data: decrypted RCDF object. path: path .sav file saved. ...: Additional arguments customizing SPSS file export. parent_dir: optional parent directory included path files written.","code":"write_rcdf_sav(data, path, ..., parent_dir = NULL) write_rcdf_sav(data = rcdf_data, path = \"path/to/output\")"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-sqlite-database-format","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to SQLite database format","title":"Working with RCDF Files in R","text":"write_rcdf_sqlite() function allows export decrypted RCDF data SQLite database (.db extension). data frame saved table within SQLite database. Usage: Parameters: data: decrypted RCDF object. path: path SQLite database file created. ...: Additional arguments customizing SQLite export. parent_dir: optional parent directory included path files written.","code":"write_rcdf_sqlite(data, path, ..., parent_dir = NULL) write_rcdf_sqlite(data = rcdf_data, path = \"path/to/output\")"},{"path":"https://yng-me.github.io/rcdf/articles/rcdf.html","id":"exporting-data-to-multiple-formats-simultaneously","dir":"Articles","previous_headings":"Exporting data to other formats","what":"Exporting data to multiple formats simultaneously","title":"Working with RCDF Files in R","text":"write_rcdf_as() function allows export decrypted RCDF data multiple file formats simultaneously. Usage: Parameters: data: named list RCDF object. element table tibble-like object (typically dbplyr dplyr table). path: target directory output files saved. formats: character vector file formats export . Supported formats include: \"csv\", \"tsv\", \"json\", \"parquet\", \"xlsx\", \"dta\", \"sav\", \"sqlite\". ...: Additional arguments passed respective writer functions.","code":"write_rcdf_as(data, path, formats, ...)"},{"path":"https://yng-me.github.io/rcdf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bhas Abdulsamad. Author, maintainer, copyright holder.","code":""},{"path":"https://yng-me.github.io/rcdf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abdulsamad B (2025). rcdf: Comprehensive Toolkit Working Encrypted Parquet Files. R package version 0.1.0, https://yng-.github.io/rcdf/.","code":"@Manual{,   title = {rcdf: A Comprehensive Toolkit for Working with Encrypted Parquet Files},   author = {Bhas Abdulsamad},   year = {2025},   note = {R package version 0.1.0},   url = {https://yng-me.github.io/rcdf/}, }"},{"path":"https://yng-me.github.io/rcdf/index.html","id":"the-rcdf-package","dir":"","previous_headings":"","what":"A Comprehensive Toolkit for Working with Encrypted Parquet Files","title":"A Comprehensive Toolkit for Working with Encrypted Parquet Files","text":"Comprehensive Toolkit Working RCDF (Encrypted Parquet) Files R rcdf provides functions easily create, read, manipulate RCDF files (encrypted Parquet format) R. package supports robust encryption decryption workflows, integrates Arrow efficient data access, provides utilities managing metadata, generating AES keys, . Key features include: Secure Data Handling: Functions reading writing encrypted Parquet files using AES RSA encryption. Metadata Management: Tools handling storing metadata RCDF files, including automated key generation decryption. Parquet Integration: Full integration arrow package read write Parquet files seamlessly. Cross-Platform Support: Compatible Linux, macOS, Windows environments.","code":""},{"path":"https://yng-me.github.io/rcdf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Comprehensive Toolkit for Working with Encrypted Parquet Files","text":"can install development version rcdf GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"yng-me/rcdf\")"},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata attributes to a data frame — add_metadata","title":"Add metadata attributes to a data frame — add_metadata","text":"Adds variable labels value labels data frame based metadata dictionary. particularly useful preparing datasets use packages like `haven` exporting formats like SPSS Stata.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata attributes to a data frame — add_metadata","text":"","code":"add_metadata(data, metadata, ..., set_data_types = FALSE)"},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata attributes to a data frame — add_metadata","text":"data data frame containing raw dataset. metadata data frame serves metadata dictionary. must contain least columns: `\"variable_name\"`, `\"label\"`, `\"type\"`. Optionally, may include `\"valueset\"` column categorical variables, list column data frames containing `\"value\"` `\"label\"` columns. ... Additional arguments (currently unused). set_data_types Logical; `TRUE`, attempts coerce column data types match implied metadata. (Note: currently fully implemented.)","code":""},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add metadata attributes to a data frame — add_metadata","text":"`tibble` data `data`, added attributes:   - Variable labels (via `\"label\"` attribute)   - Value labels (`haven::labelled` class, applicable)","code":""},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add metadata attributes to a data frame — add_metadata","text":"function first checks structure `metadata` using internal helper. , variable listed `metadata`, : - Adds label using `\"label\"` attribute - Converts values labelled vectors using `haven::labelled()` `valueset` provided value labels present, function tries align data types data valueset (e.g., converting character codes integers necessary).","code":""},{"path":"https://yng-me.github.io/rcdf/reference/add_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add metadata attributes to a data frame — add_metadata","text":"","code":"data <- data.frame(   sex = c(1, 2, 1),   age = c(23, 45, 34) )  metadata <- data.frame(   variable_name = c(\"sex\", \"age\"),   label = c(\"Gender\", \"Age in years\"),   type = c(\"categorical\", \"numeric\"),   valueset = I(list(     data.frame(value = c(1, 2), label = c(\"Male\", \"Female\")),     NULL   )) )  labelled_data <- add_metadata(data, metadata) str(labelled_data) #> tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>  $ sex: dbl+lbl [1:3] 1, 2, 1 #>    ..@ labels: Named num [1:2] 1 2 #>    .. ..- attr(*, \"names\")= chr [1:2] \"Male\" \"Female\" #>    ..@ label : chr \"Gender\" #>  $ age: num [1:3] 23 45 34 #>   ..- attr(*, \"label\")= chr \"Age in years\""},{"path":"https://yng-me.github.io/rcdf/reference/as_rcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to `rcdf` class — as_rcdf","title":"Convert to `rcdf` class — as_rcdf","text":"Converts existing list compatible object object class `\"rcdf\"`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/as_rcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to `rcdf` class — as_rcdf","text":"","code":"as_rcdf(data)"},{"path":"https://yng-me.github.io/rcdf/reference/as_rcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to `rcdf` class — as_rcdf","text":"data list object converted class `\"rcdf\"`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/as_rcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to `rcdf` class — as_rcdf","text":"input object class set `\"rcdf\"`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/as_rcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to `rcdf` class — as_rcdf","text":"","code":"my_list <- list(a = 1, b = 2) rcdf_obj <- as_rcdf(my_list) class(rcdf_obj) #> [1] \"list\" \"rcdf\""},{"path":"https://yng-me.github.io/rcdf/reference/rcdf_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty `rcdf` object — rcdf_list","title":"Create an empty `rcdf` object — rcdf_list","text":"Initializes returns empty `rcdf` object. convenient constructor creating new `rcdf`-class list structure.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/rcdf_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty `rcdf` object — rcdf_list","text":"","code":"rcdf_list()"},{"path":"https://yng-me.github.io/rcdf/reference/rcdf_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty `rcdf` object — rcdf_list","text":"list object class `\"rcdf\"`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/rcdf_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty `rcdf` object — rcdf_list","text":"","code":"rcdf <- rcdf_list() class(rcdf) #> [1] \"list\" \"rcdf\""},{"path":"https://yng-me.github.io/rcdf/reference/read_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Read environment variables from a file — read_env","title":"Read environment variables from a file — read_env","text":"Reads `.env` file containing environment variables format `KEY=VALUE`, returns named list. Lines starting `#` considered comments ignored. function also removes quotes (`\"`) around values present.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read environment variables from a file — read_env","text":"","code":"read_env(path)"},{"path":"https://yng-me.github.io/rcdf/reference/read_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read environment variables from a file — read_env","text":"path string specifying path `.env` file. provided, defaults `.env` current working directory.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read environment variables from a file — read_env","text":"named list environment variables. element key-value pair extracted file. variables found, `NULL` returned.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read environment variables from a file — read_env","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming an `.env` file with the following content: # DB_HOST=localhost # DB_USER=root # DB_PASS=\"secret\"  env_vars <- read_env(\".env\") print(env_vars) # Should output something like: # $DB_HOST # [1] \"localhost\"  # If no path is given, it defaults to `.env` in the current directory. env_vars <- read_env() } # }"},{"path":"https://yng-me.github.io/rcdf/reference/read_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Parquet file with optional decryption — read_parquet","title":"Read Parquet file with optional decryption — read_parquet","text":"function reads Parquet file, optionally decrypting using provided decryption key. decryption key provided, reads file normally without decryption. supports reading Parquet files Arrow tables regular data frames, depending `as_arrow_table` argument.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Parquet file with optional decryption — read_parquet","text":"","code":"read_parquet(path, ..., decryption_key = NULL, as_arrow_table = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/read_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Parquet file with optional decryption — read_parquet","text":"path file path Parquet file. ... Additional arguments passed `arrow::open_dataset()` decryption key provided. decryption_key list containing `aes_key` `aes_iv`. provided, Parquet file decrypted using keys. Default `NULL`. as_arrow_table Logical. `TRUE`, function return result Arrow table. `FALSE`, regular data frame returned. Default `TRUE`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Parquet file with optional decryption — read_parquet","text":"Arrow table data frame, depending value `as_arrow_table`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Parquet file with optional decryption — read_parquet","text":"","code":"# Using sample Parquet files from `mtcars` dataset dir <- system.file(\"extdata\", package = \"rcdf\")  # Without decryption df <- read_parquet(file.path(dir, \"mtcars.parquet\")) df #> FileSystemDataset with 1 Parquet file #> 11 columns #> mpg: double #> cyl: double #> disp: double #> hp: double #> drat: double #> wt: double #> qsec: double #> vs: double #> am: double #> gear: double #> carb: double #>  #> See $metadata for additional Schema metadata  # With decryption decryption_key <- list(   aes_key = \"5bddd0ea4ab48ed5e33b1406180d68158aa255cf3f368bdd4744abc1a7909ead\",   aes_iv = \"7D3EF463F4CCD81B11B6EC3230327B2D\" )  df_with_encryption <- read_parquet(   file.path(dir, \"mtcars-encrypted.parquet\"),   decryption_key = decryption_key  ) df_with_encryption #> Table #> 32 rows x 11 columns #> $mpg <double> #> $cyl <double> #> $disp <double> #> $hp <double> #> $drat <double> #> $wt <double> #> $qsec <double> #> $vs <double> #> $am <double> #> $gear <double> #> $carb <double> #>  #> See $metadata for additional Schema metadata"},{"path":"https://yng-me.github.io/rcdf/reference/read_rcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and decrypt RCDF data — read_rcdf","title":"Read and decrypt RCDF data — read_rcdf","text":"function reads RCDF (Reusable Data Container Format) archive, decrypts contents using specified decryption key, loads R RCDF object. data files within archive (usually Parquet files) decrypted , provided, metadata (data dictionary value sets) applied data.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_rcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and decrypt RCDF data — read_rcdf","text":"","code":"read_rcdf(path, decryption_key, ..., password = NULL, metadata = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/read_rcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and decrypt RCDF data — read_rcdf","text":"path string specifying path RCDF archive (zip file). decryption_key key used decrypt RCDF contents. can RSA AES key, depending RCDF encrypted. ... Additional parameters passed functions, needed. password password used RSA decryption (optional). metadata optional metadata object containing data dictionaries value sets. metadata applied data provided.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_rcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and decrypt RCDF data — read_rcdf","text":"RCDF object, list Parquet files (one record) along attached metadata.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/read_rcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and decrypt RCDF data — read_rcdf","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) rcdf_data #> $mtcars #> Table #> 32 rows x 11 columns #> $mpg <double> #> $cyl <double> #> $disp <double> #> $hp <double> #> $drat <double> #> $wt <double> #> $qsec <double> #> $vs <double> #> $am <double> #> $gear <double> #> $carb <double> #>  #> See $metadata for additional Schema metadata #>  #> attr(,\"metadata\") #> attr(,\"metadata\")$log_id #> [1] \"cd2c7923-b59a-45d4-a229-ece2a7d08b39\" #>  #> attr(,\"metadata\")$key_app #> [1] \"QnNixka1a8HbTUS7/rUfPWpFMj5/Dqw7WuDbJ2Fdzko6kKQEtFArJB+KqJ+slZb14cXhstc8Qjt9tUuS5IxTS5rq3JAlei6wInB05Jv1qqp6jtv+/soVxid7oiUxRfOLbguk9WSigoAecJn6qQHwhRYrN4vLs/FvOHYO6h0SfKJBvZekil9mVJLayY7AusN09LQIm36ZOdi4mNpvmvaZwmLwBUdIocd/c57smGCZODU0R4byT6OjHkNP9QesvuNVpyuDEALoA7tzNdDiKjVTBRbEeTkXRb6lnM6PybL0FYaQiBoDPItiWTmjQEiZSzDZo5DREqoymq0LFN4MrxJ+dA==\" #>  #> attr(,\"metadata\")$iv_app #> [1] \"TWKANaldZMAFL4XyvekGKLnE9+oNLloN0DR5BBqCG3r4fVF/Y1as5/TX4yWJt2iwwEgCrrsntjqzeyeBskX2Q9Xcwgao2IGDVklg1q4jhsaC5YnlaZ0NekZe7qLpVWzJJjAFwc5PxIZnXu1z7XPfvBzDeriR40eRHY+IZZAa+iji+BAZ9DBK8cztuTp7F2fggrReji8vG0AC8QA/aBSOI/NwScMAdivlhF+26BCoX6ua+J0G5diCW3MyBRe5iR+6KYA/ZtEL8/gdo7VjMvL6+08rl3ikfPPE8hVKw0iIGHdm7yQanwVEDpgFBJ+nX5rw8quOVhNoqCESvOyfkaA+5w==\" #>  #> attr(,\"metadata\")$key_admin #> [1] \"kuuwMAN7OD0ryQ+6o490KEpcw78ZFaChkXbRrZK9MzBFc0LhcXFDIx3zvYCxnqScNOJ6t4MMCg0jIEkEOl7V4xPnDeuHqFpdcjZB8u3W1A5LB8O/NIjf8Oj6DWnyxKhbhU8DYGGRCnRVsPJuLKv2/wxio0o+VAH7QYRCjCfuJDyzqXW3orLCUeTCd1pfrdh5x0hITvSLnHIysGihWMT29E+VLeEuALb3cNMutGpr0V86boBT+RIeyNkSphatC8N22K6J/+SsKJtnu/3P5pg3pMouJzgxqHieE9Li9oAgkMIxc0Xam5nqh2MYEt7HRI9vyoWMCOmCnCgIM8mmh0/cLQ==\" #>  #> attr(,\"metadata\")$iv_admin #> [1] \"LB+hdBdak78G+oMmsw6IrVy10VsUDCox/HngWJ2qGPr2BR6sHNHugQh7dGiRxD3j9MAsyx4l0oTpczSMrKPJC5bnESnlOYZgBST4kaSF0m7crIQ0iRcjzWg8DEyDEPjI3XUif951UnjZY+tzxQAsCDc8BjMOTaoe/T99P8ViIdXDS/MQKFKmUgQEK607FrIf4DLtHDqn/QPj3JWrEc/CQgL52QyOMNsDD2thOBfrNZslVBRTx/n+EWV2L9Ga3MaDPjXxTkbStz8hc3IMWZ8MVGSgGoOpqjAU5zAkUpqo1Y03/MSZa3Z5M0XBD+w1PtIqmh3jsY5oxW6hG7ug+ZaXHQ==\" #>  #> attr(,\"metadata\")$pc_os #> [1] \"darwin\" #>  #> attr(,\"metadata\")$pc_os_release_date #> [1] \"Tue Apr 22 19:54:49 PDT 2025\" #>  #> attr(,\"metadata\")$pc_os_version #> [1] \"24.5.0\" #>  #> attr(,\"metadata\")$pc_hardware #> [1] \"arm64\" #>  #> attr(,\"metadata\")$created_at #> [1] \"2025-08-23 13:03:40\" #>  #> attr(,\"metadata\")$version #> [1] 1 #>  #> attr(,\"metadata\")$checksum #>             file                            value #> 1 mtcars.parquet e89abe4f7eab505621a99fda1eb8cc2f #>  #> attr(,\"metadata\")$dir #> [1] \"/tmp/RtmpOSYXgZ/__rcdf_temp__/mtcars\" #>  #> attr(,\"class\") #> [1] \"list\" \"rcdf\"  # Using encrypted/password protected private key rcdf_path_pw <- file.path(dir, 'mtcars-pw.rcdf') private_key_pw <- file.path(dir, 'sample-private-key-pw.pem') pw <- '1234'  rcdf_data_with_pw <- read_rcdf(   path = rcdf_path_pw,   decryption_key = private_key_pw,   password = pw )  rcdf_data_with_pw #> $mtcars #> Table #> 32 rows x 11 columns #> $mpg <double> #> $cyl <double> #> $disp <double> #> $hp <double> #> $drat <double> #> $wt <double> #> $qsec <double> #> $vs <double> #> $am <double> #> $gear <double> #> $carb <double> #>  #> See $metadata for additional Schema metadata #>  #> attr(,\"metadata\") #> attr(,\"metadata\")$log_id #> [1] \"8c20de9d-3bd8-4f34-8548-7081a769ff57\" #>  #> attr(,\"metadata\")$key_app #> [1] \"JkcnTsjt/qp0W+5SESZVDS0qZdsGWiQTFc9v/RgcnuEbHCfyRx22WbeYsSPlAczXvN5NcIOWT0ZXEolBlW5EGfCUn8NkHOrzH3qXD7x/bJKHDGx5fv8imYKyeZYgndIA1BiEU04jiOcYeUsVIJmPvpjp3fNvbmWyBnaw1iYQh/Kr19Gvye+8dgpALswXdhXSq7mfs+dZo546MhxSWiH1LCvMJ+OINz4DCC98ZHRukO/EXcYVYVcgMxyNm/Rc/YfAOxYUqWukAgqYEoTqkgz8E8IzSxXNPlfbC4X7ONgw2bOW37cuvKdhrrsw1Oes5TTpgCv9aazFKhl5kEDfzEJlPQ==\" #>  #> attr(,\"metadata\")$iv_app #> [1] \"Oz5finlVo1deTRKH+8ZuDECAwSP6fxmeIhwXSbtvxX2qMgDSyrCpChnCJQgVMsrjQnuhHZzQ3xc7mdJabO5S/JaugUjOzgMDg/HH5/5b5CKbuVsLfnPPWpyj37RhVIquNbS5hFas15MTnyk3ASNqMn3VQW3xjC9xvXceJ6FPhonILFlCYy0vd5D+bEMl7bLrpUhczFWZfZFQOhxv6SguuK3KgK5WdRtiq3CUyvpTmgjpX7n+ka9SkH/o/2KyHgjiC6niSdzAkcIGk205sWdsoigcz9pTZ+WKLNbvxWasD5NFB/xKuldOjdmo4+qQ/UWgzmq4xY7JPyez4obQneRHjw==\" #>  #> attr(,\"metadata\")$key_admin #> [1] \"T9p8Aok+lF+CpfDP7iTp1eeY7UzqFqGD9Bg2LkA1Ge1+f5qr+2nKaR29HajZiSaQharElT9lvrsZ+eNej114d+4yVOS7zqNsy0w3ffTgUeUc1sHIHow4bX89+mleuKuofQxe5TcG/wFAZ0qYcaP3RtBkarnqf1ZdRBjhxWi/gHBu8Y+GD20lyd+49eCBvOPkrr/OaL7o+Cj9C9dV5hh2wweiCEMp95cWrK6gnvuB6K1wnJWSv83ql3Hhl7EqNV4oHY8RQNib3JFeHEJ3jxaouFhDEP2i49bigq1RUFnV1bDO/YeWTjkXzB6KT/mPvgZmnGnOexnUpPiOlEOT+ImYng==\" #>  #> attr(,\"metadata\")$iv_admin #> [1] \"RYewhhMVXOXQpvb7kx7vSrmkSQGjVoy0x6+gg2bY3osKtbAEs+yNouWTjd+tIp8/gTmB2Eucfz+FOwQxhbmx3KMg7v4MTWqVFMm71MUmiVAQESax2TSI//aEefW+wkg1/l3AMhrhG5xEgSa2jMg3oRW4r8CmH21BeUvtPjBP7yk1x0h5tvCcHuGIlLeFxEIeGldl4I64mlADX9lEZ+VbmIMbye0DrqbA13YfvGnmYhuRFWOo32odBqZ+4dkCdzClRc5gWlQTP3YftEKKOWg00L88fEpiZUCK7Jv29D5+yAPZTnAtI0JvAH3TAuWYUa9fmxKL/bTKBUBuF8naInQl1A==\" #>  #> attr(,\"metadata\")$pc_os #> [1] \"darwin\" #>  #> attr(,\"metadata\")$pc_os_release_date #> [1] \"Tue Apr 22 19:54:49 PDT 2025\" #>  #> attr(,\"metadata\")$pc_os_version #> [1] \"24.5.0\" #>  #> attr(,\"metadata\")$pc_hardware #> [1] \"arm64\" #>  #> attr(,\"metadata\")$created_at #> [1] \"2025-08-23 13:03:48\" #>  #> attr(,\"metadata\")$version #> [1] 1 #>  #> attr(,\"metadata\")$checksum #>             file                            value #> 1 mtcars.parquet 9534342a18251e405704905deed9ba0f #>  #> attr(,\"metadata\")$dir #> [1] \"/tmp/RtmpOSYXgZ/__rcdf_temp__/mtcars-pw\" #>  #> attr(,\"class\") #> [1] \"list\" \"rcdf\""},{"path":"https://yng-me.github.io/rcdf/reference/write_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Parquet file with optional encryption — write_parquet","title":"Write Parquet file with optional encryption — write_parquet","text":"function writes dataset Parquet file. encryption key provided, data encrypted writing. Otherwise, function writes data regular Parquet file without encryption.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Parquet file with optional encryption — write_parquet","text":"","code":"write_parquet(data, path, ..., encryption_key = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Parquet file with optional encryption — write_parquet","text":"data data frame tibble write Parquet file. path file path Parquet file written. ... Additional arguments passed `arrow::write_parquet()` encryption key provided. encryption_key list containing `aes_key` `aes_iv`. provided, data encrypted using AES writing Parquet.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Parquet file with optional encryption — write_parquet","text":"None. function writes data Parquet file specified `path`.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Parquet file with optional encryption — write_parquet","text":"","code":"data <- mtcars key <- \"5bddd0ea4ab48ed5e33b1406180d68158aa255cf3f368bdd4744abc1a7909ead\" iv <- \"7D3EF463F4CCD81B11B6EC3230327B2D\"  temp_dir <- tempdir()  rcdf::write_parquet(   data = data,   path = file.path(temp_dir, \"mtcars.parquet\"),   encryption_key = list(aes_key = key, aes_iv = iv) )  unlink(file.path(temp_dir, \"mtcars.parquet\"), force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data to RCDF format — write_rcdf","title":"Write data to RCDF format — write_rcdf","text":"function writes data RCDF (Reusable Data Container Format) archive. encrypts data using AES, generates metadata, creates zip archive containing encrypted Parquet files metadata. function supports inclusion metadata system information encryption keys.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data to RCDF format — write_rcdf","text":"","code":"write_rcdf(data, path, pub_key, ..., metadata = list())"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data to RCDF format — write_rcdf","text":"data list data frames tables written RCDF format. element list represents record. path path RCDF file written. file saved `.rcdf` extension already specified. pub_key public RSA key used encrypt AES encryption keys. ... Additional arguments passed helper functions needed. metadata list metadata included RCDF file. Can contain system information relevant details.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data to RCDF format — write_rcdf","text":"NULL. function writes data `.rcdf` file specified path.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data to RCDF format — write_rcdf","text":"","code":"# Example usage of writing an RCDF file  rcdf_data <- rcdf_list() rcdf_data$mtcars <- mtcars  dir <- system.file(\"extdata\", package = \"rcdf\")  temp_dir <- tempdir()  write_rcdf(   data = rcdf_data,   path = file.path(temp_dir, \"mtcars.rcdf\"),   pub_key = file.path(dir, 'sample-public-key.pem') )  write_rcdf(   data = rcdf_data,   path = file.path(temp_dir, \"mtcars-pw.rcdf\"),   pub_key = file.path(dir, 'sample-public-key-pw.pem') )  unlink(file.path(temp_dir, \"mtcars.rcdf\"), force = TRUE) unlink(file.path(temp_dir, \"mtcars-pw.rcdf\"), force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to multiple formats — write_rcdf_as","title":"Write RCDF data to multiple formats — write_rcdf_as","text":"Exports RCDF-formatted data one supported open data formats. function automatically dispatches appropriate writer function based `formats` provided.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to multiple formats — write_rcdf_as","text":"","code":"write_rcdf_as(data, path, formats, ...)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to multiple formats — write_rcdf_as","text":"data named list RCDF object. element table tibble-like object (typically `dbplyr` `dplyr` table). path target directory output files saved. formats character vector file formats export . Supported formats include: `\"csv\"`, `\"tsv\"`, `\"json\"`, `\"parquet\"`, `\"xlsx\"`, `\"dta\"`, `\"sav\"`, `\"sqlite\"`. ... Additional arguments passed respective writer functions.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to multiple formats — write_rcdf_as","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to multiple formats — write_rcdf_as","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_as(data = rcdf_data, path = temp_dir, formats = c(\"csv\", \"xlsx\"))  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to CSV files — write_rcdf_csv","title":"Write RCDF data to CSV files — write_rcdf_csv","text":"Writes table RCDF object separate `.csv` file.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to CSV files — write_rcdf_csv","text":"","code":"write_rcdf_csv(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to CSV files — write_rcdf_csv","text":"data valid RCDF object. path base output directory. ... Additional arguments passed `write.csv()`. parent_dir Optional subdirectory `path` group CSV files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to CSV files — write_rcdf_csv","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to CSV files — write_rcdf_csv","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_csv(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_dta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","title":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","text":"Writes table RCDF object `.dta` file use Stata.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_dta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","text":"","code":"write_rcdf_dta(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_dta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","text":"data valid RCDF object. path Output directory files. ... Additional arguments passed `foreign::write.dta()`. parent_dir Optional subdirectory `path` group Stata files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_dta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_dta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to Stata `.dta` files — write_rcdf_dta","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_dta(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to JSON files — write_rcdf_json","title":"Write RCDF data to JSON files — write_rcdf_json","text":"Writes table RCDF object separate `.json` file.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to JSON files — write_rcdf_json","text":"","code":"write_rcdf_json(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to JSON files — write_rcdf_json","text":"data valid RCDF object. path output directory files. ... Additional arguments passed `jsonlite::write_json()`. parent_dir Optional subdirectory `path` group JSON files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to JSON files — write_rcdf_json","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to JSON files — write_rcdf_json","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_json(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to Parquet files — write_rcdf_parquet","title":"Write RCDF data to Parquet files — write_rcdf_parquet","text":"function writes RCDF object (list data frames) multiple Parquet files. data frame list written corresponding Parquet file specified path.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to Parquet files — write_rcdf_parquet","text":"","code":"write_rcdf_parquet(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to Parquet files — write_rcdf_parquet","text":"data list element data frame tibble written Parquet file. path directory path Parquet files written. ... Additional arguments passed `rcdf::write_parquet()` writing Parquet file. parent_dir optional parent directory included path files written.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to Parquet files — write_rcdf_parquet","text":"character vector file paths written Parquet files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to Parquet files — write_rcdf_parquet","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_parquet(data = rcdf_data, path = temp_dir) #> [1] \"/tmp/RtmpOSYXgZ/mtcars.parquet\"  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sav.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","title":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","text":"Writes table RCDF object `.sav` file using `haven` package compatibility SPSS.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sav.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","text":"","code":"write_rcdf_sav(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sav.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","text":"data valid RCDF object. path Output directory files. ... Additional arguments passed `haven::write_sav()`. parent_dir Optional subdirectory `path` group SPSS files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sav.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sav.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to SPSS `.sav` files — write_rcdf_sav","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_sav(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sqlite.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to a SQLite database — write_rcdf_sqlite","title":"Write RCDF data to a SQLite database — write_rcdf_sqlite","text":"Writes tables RCDF object single SQLite database file.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sqlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to a SQLite database — write_rcdf_sqlite","text":"","code":"write_rcdf_sqlite(data, path, db_name = \"cbms_data\", ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sqlite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to a SQLite database — write_rcdf_sqlite","text":"data valid RCDF object. path Output directory database file. db_name Name SQLite database file (without extension). ... Additional arguments passed `DBI::dbWriteTable()`. parent_dir Optional subdirectory `path` store SQLite file.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sqlite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to a SQLite database — write_rcdf_sqlite","text":"Invisibly returns `NULL`. `.db` file written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_sqlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to a SQLite database — write_rcdf_sqlite","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_sqlite(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to TSV files — write_rcdf_tsv","title":"Write RCDF data to TSV files — write_rcdf_tsv","text":"Writes table RCDF object separate tab-separated `.txt` file.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_tsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to TSV files — write_rcdf_tsv","text":"","code":"write_rcdf_tsv(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_tsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to TSV files — write_rcdf_tsv","text":"data valid RCDF object. path base output directory. ... Additional arguments passed `write.table()`. parent_dir Optional subdirectory `path` group TSV files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_tsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to TSV files — write_rcdf_tsv","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_tsv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to TSV files — write_rcdf_tsv","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_tsv(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RCDF data to Excel files — write_rcdf_xlsx","title":"Write RCDF data to Excel files — write_rcdf_xlsx","text":"Writes table RCDF object separate `.xlsx` file using `openxlsx` package.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RCDF data to Excel files — write_rcdf_xlsx","text":"","code":"write_rcdf_xlsx(data, path, ..., parent_dir = NULL)"},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RCDF data to Excel files — write_rcdf_xlsx","text":"data valid RCDF object. path output directory. ... Additional arguments passed `openxlsx::write.xlsx()`. parent_dir Optional subdirectory `path` group Excel files.","code":""},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RCDF data to Excel files — write_rcdf_xlsx","text":"Invisibly returns `NULL`. Files written disk.","code":""},{"path":[]},{"path":"https://yng-me.github.io/rcdf/reference/write_rcdf_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RCDF data to Excel files — write_rcdf_xlsx","text":"","code":"dir <- system.file(\"extdata\", package = \"rcdf\") rcdf_path <- file.path(dir, 'mtcars.rcdf') private_key <- file.path(dir, 'sample-private-key.pem')  rcdf_data <- read_rcdf(path = rcdf_path, decryption_key = private_key) temp_dir <- tempdir()  write_rcdf_xlsx(data = rcdf_data, path = temp_dir)  unlink(temp_dir, force = TRUE)"}]
